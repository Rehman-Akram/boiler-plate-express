const Sequelize = require('sequelize');
const sequelize   = require("../../../../database/index");
const { setTrim, setLowerCaseTrim } = require('../../../shared/utils');
const { hash } = require('bcrypt');
const users = sequelize.define('users',
  {
    id: {
      type: Sequelize.UUID,
      defaultValue: Sequelize.UUIDV4,
      primaryKey: true,
    },
    firstName: {
      type: Sequelize.STRING,
      allowNull: false,
      set: setTrim("firstName"),
    },
    lastName: {
      type: Sequelize.STRING,
      set: setTrim("lastName"),
    },
    status: {
      type: Sequelize.ENUM('active', 'pending', 'deleted'),
      defaultValue: 'pending',
      allowNull: false,
    },
    gender: {
      type: Sequelize.ENUM('male', 'female', 'other'),
    },
    email: {
      type: Sequelize.STRING,
      allowNull: false,
      unique: true,
      set: setLowerCaseTrim("email"),
      validate: {
        notEmpty: true,
        isEmail: true,
      },
    },
    phoneNo: {
      type: Sequelize.STRING,
      unique: true,
    },
    dateOfBirth: {
      type: Sequelize.DATEONLY,
    },
    address: {
      type: Sequelize.STRING,
      set: setTrim("address"),
    },

    password: {
      type: Sequelize.STRING,
    },

    avatar: {
      type: Sequelize.STRING, 
    },

    emailVerified: {
      type: Sequelize.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    },

    phoneVerified: {
      type: Sequelize.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    },
    createdAt: {
      type: Sequelize.DATE,
      allowNull: false,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
    },
    updatedAt: {
      type: Sequelize.DATE,
      allowNull: false,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
      onUpdate: Sequelize.literal('CURRENT_TIMESTAMP'),
    },
  },
  {
    timestamps: false, // This is to disable the timestamp columns autogenerated by sequelize createdAt and updatedAt
    hooks: {
      beforeCreate: async (user, options) => {
        if (user.password) {
          user.password = await hash(user.password, 10);
        }
      },
      beforeUpdate: async (user, options) => {
        if (user.changed('password')) {
          user.password = await hash(user.password, 10);
        }
      },
    }
  }
);

module.exports = users;